<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>EnricoBDev&#39;s Blog</title>
    <link>https://enricobdev.github.io/blog/</link>
    <description>Recent content on EnricoBDev&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 25 Sep 2025 20:42:00 +0200</lastBuildDate><atom:link href="https://enricobdev.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Why does synthwave make us nostalgic?</title>
      <link>https://enricobdev.github.io/blog/why-does-synthwave-make-us-nostalgic/</link>
      <pubDate>Thu, 25 Sep 2025 20:42:00 +0200</pubDate>
      
      <guid>https://enricobdev.github.io/blog/why-does-synthwave-make-us-nostalgic/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;Synth-sunset-.webp&#34; alt=&#34;synthwave wallpaper&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;why-does-synthwave-make-us-nostalgic&#34;&gt;Why does synthwave make us nostalgic?&lt;/h1&gt;
&lt;p&gt;Before diving in our &amp;ldquo;investigation&amp;rdquo;, I wanted to tell you how this article came to life&amp;hellip;&lt;/p&gt;
&lt;p&gt;A few weeks ago I was cramming for my computer architecture exam and I wanted some kind of background music that was not too distracting, you might say the obvious pick would be some lo-fi hip-hop radio playlist but for me it&amp;rsquo;s way too chill and relaxing (not ideal when you are sleep deprived), so I decided to pick &lt;a href=&#34;https://youtu.be/k3WkJq478To?si=PDCGq3v1dNHtLr5G&#34;&gt;this&lt;/a&gt; synthwave playlist that I used to listen to and after a few songs an inexplicable wave of nostalgia and melanchony hit me, that&amp;rsquo;s when I started to search why is this genre so nostalgic.&lt;/p&gt;</description>
      <content>&lt;p&gt;&lt;img src=&#34;Synth-sunset-.webp&#34; alt=&#34;synthwave wallpaper&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;why-does-synthwave-make-us-nostalgic&#34;&gt;Why does synthwave make us nostalgic?&lt;/h1&gt;
&lt;p&gt;Before diving in our &amp;ldquo;investigation&amp;rdquo;, I wanted to tell you how this article came to life&amp;hellip;&lt;/p&gt;
&lt;p&gt;A few weeks ago I was cramming for my computer architecture exam and I wanted some kind of background music that was not too distracting, you might say the obvious pick would be some lo-fi hip-hop radio playlist but for me it&amp;rsquo;s way too chill and relaxing (not ideal when you are sleep deprived), so I decided to pick &lt;a href=&#34;https://youtu.be/k3WkJq478To?si=PDCGq3v1dNHtLr5G&#34;&gt;this&lt;/a&gt; synthwave playlist that I used to listen to and after a few songs an inexplicable wave of nostalgia and melanchony hit me, that&amp;rsquo;s when I started to search why is this genre so nostalgic.&lt;/p&gt;
&lt;h2 id=&#34;what-is-synthwave&#34;&gt;What is synthwave?&lt;/h2&gt;
&lt;p&gt;Despite being heavily inspired by the 80s, synthwave is a relatively new genre, it was born from the minds of artists from the French electronic scene in the late 2000s, as the name suggests the genre is centered around the heavy use of analog synths and usually has a quite energetic rhythm, it is also quite similar to French house music (the only good thing France created \s) and Italo disco (the great Giorgio Moroder is one of the fathers of electronic music, which synthwave is a subgenre of)&lt;/p&gt;
&lt;h2 id=&#34;synthwave-in-pop-culture&#34;&gt;Synthwave in pop culture&lt;/h2&gt;
&lt;p&gt;One of the things that brought synthwave to the mainstream was the movie Drive (Ryan Gosling is literally me), and its soundtrack featuring &amp;ldquo;Kavinsky&amp;rdquo;’s famous &amp;ldquo;Nightcall&amp;rdquo; and &amp;ldquo;College&amp;rdquo;’s &amp;ldquo;A Real Hero&amp;rdquo;, the film’s theme song&lt;/p&gt;
&lt;p&gt;Another very important movie that is associated with synthwave is Blade Runner 2049, but in this case I think that people associate this movie more with the visual aesthetic of synthwave rather than the music.&lt;/p&gt;
&lt;h2 id=&#34;the-visual-aesthetic&#34;&gt;The visual aesthetic&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m sure you have all seen some pictures (like the one on header of this article) that follow the synthwave aesthetic, they all have something in common:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bright purple neon lights&lt;/li&gt;
&lt;li&gt;futuristic cars and wirefame graphics&lt;/li&gt;
&lt;li&gt;sunsets (a lot of sunsets)&lt;/li&gt;
&lt;li&gt;infinite landscapes (like tall skyscraper but also mountain terrains)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And I think that the visuals also contribute to the general nostalgia feeling, for me it&amp;rsquo;s mostly the sunsets but also the infinite landscapes, they are mostly empty, there isn&amp;rsquo;t a single person and it gives off the same vibe as a liminal space.&lt;/p&gt;
&lt;h2 id=&#34;nostalgia-for-something-i-never-lived&#34;&gt;Nostalgia for something I never lived&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s now try and understand where this nostalgia stems from&amp;hellip;&lt;/p&gt;
&lt;p&gt;As I said this music is heavily inspired from the 80s but there is a problem, I was born in the 2000s, how can I feel nostalgic about it?&lt;/p&gt;
&lt;p&gt;The thing is I have only consumed media from the 80s sporadically and I really don&amp;rsquo;t know much about that time period so really there has to be another reason why this music makes me nostalgic&amp;hellip;&lt;/p&gt;
&lt;p&gt;So the only things that I think can explain this nostalgic feeling are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the use of warm sounding analog synths and recording equipment, along with other effects create a kind of &amp;ldquo;past memory effect&amp;rdquo;, they make the music seem like a past memory, fuzzy and not quite clear&lt;/li&gt;
&lt;li&gt;specific chord progressions that trigger this melanchony, I know that specific chords and keys can be used to bring a certain feeling to the listener but there are a couple of problems:
&lt;ul&gt;
&lt;li&gt;first of all there are countless synthwave songs and they all use different keys&lt;/li&gt;
&lt;li&gt;then since it is electronic music, traditional chord progressions and rhythmic patterns are not always followed&lt;/li&gt;
&lt;li&gt;even if a song uses particular chord progressions I have not found any specific chord that brings this sense of nostalgia, so this is a dead end&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;rsquo;m going to be frank with you, I have no idea why this music brings me this melancholy and nostalgia for the good times (in my case the 2010s), and I really hope to find an answer to this someday.&lt;/p&gt;
&lt;p&gt;In the end, synthwave is not just a genre, it&amp;rsquo;s a time machine. Whether it takes us to the 80s or to a more recent past, if we bring its glorious synth melodies and funky rhythm close to our heart it will remind us that past memories are still with us, and that the good times we miss and cherish so much are yet to come.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Conditional logic in MIPS assembly</title>
      <link>https://enricobdev.github.io/blog/conditional-logic-in-mips-assembly/</link>
      <pubDate>Mon, 22 Sep 2025 21:20:03 +0200</pubDate>
      
      <guid>https://enricobdev.github.io/blog/conditional-logic-in-mips-assembly/</guid>
      <description>&lt;h1 id=&#34;conditional-logic-in-mips-assembly&#34;&gt;Conditional logic in MIPS assembly&lt;/h1&gt;
&lt;p&gt;To build traditional conditional logic the language offers us some control flow instructions and some conditional data transfer instructions, let&amp;rsquo;s see them&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Mnemonic&lt;/th&gt;
          &lt;th&gt;Sintax&lt;/th&gt;
          &lt;th&gt;Meaning&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;beq&lt;/code&gt; (branch equal)&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;beq $t0 $t1 Label&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Jumps to &amp;ldquo;Label&amp;rdquo; if &lt;code&gt;$t0&lt;/code&gt; and &lt;code&gt;$t1&lt;/code&gt; are equal&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;bne&lt;/code&gt; (branch not equal)*&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;bne $t0 $t1 Label&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Jumps to &amp;ldquo;Label&amp;rdquo; if &lt;code&gt;$t0&lt;/code&gt; and &lt;code&gt;$t1&lt;/code&gt; are different&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;slt&lt;/code&gt; (set on less than)*&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;slt $s0 $t0 $t1&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Sets register &lt;code&gt;$s0&lt;/code&gt; to 1 if &lt;code&gt;$t0 &amp;lt; $t1&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;j&lt;/code&gt; (jump)&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;jump Label&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Jumps to &lt;code&gt;Label&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;* there is also another variant of this instruction that compares the content of a register and an inmmediate value (&lt;code&gt;slti&lt;/code&gt;)&lt;/p&gt;</description>
      <content>&lt;h1 id=&#34;conditional-logic-in-mips-assembly&#34;&gt;Conditional logic in MIPS assembly&lt;/h1&gt;
&lt;p&gt;To build traditional conditional logic the language offers us some control flow instructions and some conditional data transfer instructions, let&amp;rsquo;s see them&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Mnemonic&lt;/th&gt;
          &lt;th&gt;Sintax&lt;/th&gt;
          &lt;th&gt;Meaning&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;beq&lt;/code&gt; (branch equal)&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;beq $t0 $t1 Label&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Jumps to &amp;ldquo;Label&amp;rdquo; if &lt;code&gt;$t0&lt;/code&gt; and &lt;code&gt;$t1&lt;/code&gt; are equal&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;bne&lt;/code&gt; (branch not equal)*&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;bne $t0 $t1 Label&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Jumps to &amp;ldquo;Label&amp;rdquo; if &lt;code&gt;$t0&lt;/code&gt; and &lt;code&gt;$t1&lt;/code&gt; are different&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;slt&lt;/code&gt; (set on less than)*&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;slt $s0 $t0 $t1&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Sets register &lt;code&gt;$s0&lt;/code&gt; to 1 if &lt;code&gt;$t0 &amp;lt; $t1&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;j&lt;/code&gt; (jump)&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;jump Label&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Jumps to &lt;code&gt;Label&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;* there is also another variant of this instruction that compares the content of a register and an inmmediate value (&lt;code&gt;slti&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;Now we will see every condition present in any modern programming language, in each example we will translate the same if statement, but we will change the condition, here is the C code we will translate:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (f condition g){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    f &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    f &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We will also suppose that the variable &lt;code&gt;f&lt;/code&gt; is the &lt;code&gt;$t0&lt;/code&gt; register and &lt;code&gt;g&lt;/code&gt; is &lt;code&gt;$t1&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;-and--condition&#34;&gt;&lt;code&gt;!=&lt;/code&gt; and &lt;code&gt;==&lt;/code&gt; condition&lt;/h2&gt;
&lt;p&gt;To create these conditions we just need to use the provided &lt;code&gt;bne&lt;/code&gt;, &lt;code&gt;beq&lt;/code&gt; instructions, let&amp;rsquo;s see an example with the &lt;code&gt;!=&lt;/code&gt; condition:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;beq $t0, $t1, Else
addi $t0, $t0, 1
j Exit

Else:
    subi $t0, $t0, 1

Exit:
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can see that in this example we actually use the opposite instruction (we are using &lt;code&gt;beq&lt;/code&gt; for a &lt;code&gt;!=&lt;/code&gt; condition) but it still works, since we jump to the else label if the two variables are equal, otherwise we continue with the block inside the if statement.&lt;/p&gt;
&lt;h2 id=&#34;-condition&#34;&gt;&lt;code&gt;&amp;gt;=&lt;/code&gt; condition&lt;/h2&gt;
&lt;p&gt;To make this condition we are going to use the &lt;code&gt;slt&lt;/code&gt; instruction and we are going to use the same trick as before, where we negate the condition and jump to Else if the negated condition is true, let&amp;rsquo;s see:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;slt $s0, $t0, $t1
bne $s0, $zero, Else
addi $t0, $t0, 1
j Exit

Else:
    subi $t0, $t0, 1

Exit:
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;slt $s0, $t0, $t1&lt;/code&gt; is the most important line, it  exploits the fact that the negated condition of &lt;code&gt;&amp;lt;&lt;/code&gt; is &lt;code&gt;&amp;gt;=&lt;/code&gt;, so if the condition we want to achieve is true &lt;code&gt;slt&lt;/code&gt; sets &lt;code&gt;$s0 = 0&lt;/code&gt;, then after that we use the trick i just told you in the previous paragraph where we jump to Else if the negated condition is true.&lt;/p&gt;
&lt;h2 id=&#34;-condition-1&#34;&gt;&lt;code&gt;&amp;lt;&lt;/code&gt; condition&lt;/h2&gt;
&lt;p&gt;To obtain this condition we just need to change &lt;code&gt;bne&lt;/code&gt; to &lt;code&gt;beq&lt;/code&gt; in the previous snippet since now if the condition is true the output from &lt;code&gt;slt&lt;/code&gt; will be 1, after all &lt;code&gt;slt&lt;/code&gt; checks the &lt;code&gt;&amp;lt;&lt;/code&gt; condition&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;slt $s0, $t0, $t1
beq $s0, $zero, Else
addi $t0, $t0, 1
j Exit

Else:
    subi $t0, $t0, 1

Exit:
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;-condition-2&#34;&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; condition&lt;/h2&gt;
&lt;p&gt;To translate this condition we use the fact that by inverting the operands of a &lt;code&gt;&amp;lt;&lt;/code&gt; condition we get the &lt;code&gt;&amp;gt;&lt;/code&gt; condition, let&amp;rsquo;s see the implementation:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;slt $s0, $t1, $t0
beq $s0, $zero, Else
addi $t0, $t0, 1
j Exit

Else:
    subi $t0, $t0, 1

Exit:
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;-condition-3&#34;&gt;&lt;code&gt;&amp;lt;=&lt;/code&gt; condition&lt;/h2&gt;
&lt;p&gt;The last condition is &lt;code&gt;&amp;lt;=&lt;/code&gt;, to translate it we exploit the fact that &lt;code&gt;&amp;lt;=&lt;/code&gt; is the negation of &lt;code&gt;&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;slt $s0, $t1, $t0
bne $s0, $zero, Else
addi $t0, $t0, 1
j Exit

Else:
    subi $t0, $t0, 1

Exit:
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We use the same check &lt;code&gt;slt $s0, $t1, $t0&lt;/code&gt; that we used for &lt;code&gt;&amp;gt;&lt;/code&gt; but the difference is that if the condition we want to achieve is true, then &lt;code&gt;slt&lt;/code&gt; outputs a 0 (as we said &lt;code&gt;&amp;lt;=&lt;/code&gt; is the negation of &lt;code&gt;&amp;gt;&lt;/code&gt;, and we just switched the operands when using &lt;code&gt;slt&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;And there you have it, these are all the traditional logic conditions you are familiar with, now a couple of thoughts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pseudoinstructions that do these conditions (for example &lt;code&gt;bgt&lt;/code&gt; for &lt;code&gt;&amp;gt;&lt;/code&gt;) exists, these are instructions that are translated to other more basic instructions by the assembler (that&amp;rsquo;s what the &lt;code&gt;$at&lt;/code&gt; register is used for)&lt;/li&gt;
&lt;li&gt;these translations can be quite challenging to remember (and i really hope that my explanation was not too short or confusing), but recreating them could be a good exercise to learn or practice another assembly flavour (even though the ISA may give you different instructions)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you read all of this, thank you! If you have any questions or corrections (just keep in mind English is not my mother tongue) you can put an &lt;a href=&#34;https://github.com/EnricoBDev/blog/issues&#34;&gt;issue on Github&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
